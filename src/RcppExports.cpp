// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// evaluateEffn
List evaluateEffn(SEXP inputDataR, SEXP variable_numR, SEXP sample_numR);
RcppExport SEXP _miic_evaluateEffn(SEXP inputDataRSEXP, SEXP variable_numRSEXP, SEXP sample_numRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type inputDataR(inputDataRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type variable_numR(variable_numRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sample_numR(sample_numRSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluateEffn(inputDataR, variable_numR, sample_numR));
    return rcpp_result_gen;
END_RCPP
}
// mydiscretizeMDL
List mydiscretizeMDL(SEXP RmyDist, SEXP RmaxBins);
RcppExport SEXP _miic_mydiscretizeMDL(SEXP RmyDistSEXP, SEXP RmaxBinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type RmyDist(RmyDistSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RmaxBins(RmaxBinsSEXP);
    rcpp_result_gen = Rcpp::wrap(mydiscretizeMDL(RmyDist, RmaxBins));
    return rcpp_result_gen;
END_RCPP
}
// mydiscretizeMutual
List mydiscretizeMutual(SEXP RmyDist1, SEXP RmyDist2, SEXP RflatU, SEXP RnbrU, SEXP RmaxBins, SEXP Rinitbin, SEXP Rcplx, SEXP Rcnt_vec, SEXP Rnlevels, SEXP ReffN, SEXP RsampleWeights);
RcppExport SEXP _miic_mydiscretizeMutual(SEXP RmyDist1SEXP, SEXP RmyDist2SEXP, SEXP RflatUSEXP, SEXP RnbrUSEXP, SEXP RmaxBinsSEXP, SEXP RinitbinSEXP, SEXP RcplxSEXP, SEXP Rcnt_vecSEXP, SEXP RnlevelsSEXP, SEXP ReffNSEXP, SEXP RsampleWeightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type RmyDist1(RmyDist1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type RmyDist2(RmyDist2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type RflatU(RflatUSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RnbrU(RnbrUSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RmaxBins(RmaxBinsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rinitbin(RinitbinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rcplx(RcplxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rcnt_vec(Rcnt_vecSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rnlevels(RnlevelsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ReffN(ReffNSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RsampleWeights(RsampleWeightsSEXP);
    rcpp_result_gen = Rcpp::wrap(mydiscretizeMutual(RmyDist1, RmyDist2, RflatU, RnbrU, RmaxBins, Rinitbin, Rcplx, Rcnt_vec, Rnlevels, ReffN, RsampleWeights));
    return rcpp_result_gen;
END_RCPP
}
// reconstruct
List reconstruct(SEXP inputDataR, SEXP cntVarR, SEXP numNodesR, SEXP nThreadsR, SEXP edgefileR, SEXP blackBoxR, SEXP effNR, SEXP cplxR, SEXP etaR, SEXP hvsR, SEXP isLatentR, SEXP isTplReuseR, SEXP isK23R, SEXP isDegeneracyR, SEXP orientationR, SEXP propagationR, SEXP isNoInitEtaR, SEXP confidenceShuffleR, SEXP confidenceThresholdR, SEXP sampleWeightsR, SEXP consistentR, SEXP testDistR, SEXP verboseR);
RcppExport SEXP _miic_reconstruct(SEXP inputDataRSEXP, SEXP cntVarRSEXP, SEXP numNodesRSEXP, SEXP nThreadsRSEXP, SEXP edgefileRSEXP, SEXP blackBoxRSEXP, SEXP effNRSEXP, SEXP cplxRSEXP, SEXP etaRSEXP, SEXP hvsRSEXP, SEXP isLatentRSEXP, SEXP isTplReuseRSEXP, SEXP isK23RSEXP, SEXP isDegeneracyRSEXP, SEXP orientationRSEXP, SEXP propagationRSEXP, SEXP isNoInitEtaRSEXP, SEXP confidenceShuffleRSEXP, SEXP confidenceThresholdRSEXP, SEXP sampleWeightsRSEXP, SEXP consistentRSEXP, SEXP testDistRSEXP, SEXP verboseRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type inputDataR(inputDataRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cntVarR(cntVarRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type numNodesR(numNodesRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nThreadsR(nThreadsRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type edgefileR(edgefileRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type blackBoxR(blackBoxRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type effNR(effNRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cplxR(cplxRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type etaR(etaRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type hvsR(hvsRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type isLatentR(isLatentRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type isTplReuseR(isTplReuseRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type isK23R(isK23RSEXP);
    Rcpp::traits::input_parameter< SEXP >::type isDegeneracyR(isDegeneracyRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type orientationR(orientationRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type propagationR(propagationRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type isNoInitEtaR(isNoInitEtaRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type confidenceShuffleR(confidenceShuffleRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type confidenceThresholdR(confidenceThresholdRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sampleWeightsR(sampleWeightsRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type consistentR(consistentRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type testDistR(testDistRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type verboseR(verboseRSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstruct(inputDataR, cntVarR, numNodesR, nThreadsR, edgefileR, blackBoxR, effNR, cplxR, etaR, hvsR, isLatentR, isTplReuseR, isK23R, isDegeneracyR, orientationR, propagationR, isNoInitEtaR, confidenceShuffleR, confidenceThresholdR, sampleWeightsR, consistentR, testDistR, verboseR));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_miic_evaluateEffn", (DL_FUNC) &_miic_evaluateEffn, 3},
    {"_miic_mydiscretizeMDL", (DL_FUNC) &_miic_mydiscretizeMDL, 2},
    {"_miic_mydiscretizeMutual", (DL_FUNC) &_miic_mydiscretizeMutual, 11},
    {"_miic_reconstruct", (DL_FUNC) &_miic_reconstruct, 23},
    {NULL, NULL, 0}
};

RcppExport void R_init_miic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
